<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
	
	<import resource="../beans/beans.xml"/>
	<import resource="../spring/ol-management.xml"/>
	<lang:groovy id="samplefield" script-source="classpath:groovy/DatabaseQueryProcessor.groovy"/>
	<lang:groovy id="samplefield1" script-source="classpath:groovy/DatabaseQueryProcessornew.groovy"/>
	
    <camelContext id="ADIB_route_demographics" xmlns="http://camel.apache.org/schema/spring">

        <route id="DBPollingRoute">
		 <from uri="timer://foo?fixedRate=true&amp;period=60000"/>
		  <bean ref="samplefield1" method="process"/>
					<choice>
						<when>
							<simple>${header.IsProcessed} == 'NO' </simple>
							<bean ref="samplefield" method="process"/>
							<log message="Fetched Data in string format: ${body}" loggingLevel="INFO"/>
							<!-- Split and Process Each Row One by One -->
							<split delimiter="#">
								<simple>${body}</simple>
								<log message="Processing Record: ${body}" loggingLevel="INFO"/>
								<to uri="direct:processRecord"/>
							</split>
						</when>
						
						<when>
							<simple>${header.IsProcessed} == 'YES' </simple>
							<log message="No more Record to Process" loggingLevel="INFO"/>
						</when>
						
						<otherwise>
							<log message="No Records found in the Table" loggingLevel="INFO"/>
						</otherwise>
        </route>

        <!--  Route 2: Process Each Row -->
        <route id="procesing_route">
            <from uri="direct:processRecord"/>

            <log message="Raw Record: ${body}" loggingLevel="INFO"/>

            <!--  Add CSV Headers (for structured output) -->
            <setHeader headerName="csvId"> <constant>sample1</constant> </setHeader>
            <setHeader headerName="delimiter"> <constant>,</constant> </setHeader>
            <setHeader headerName="format"> <constant>csv</constant> </setHeader>
            <setHeader headerName="mapperId"> <constant>csvMapnew</constant> </setHeader>
            <setHeader headerName="useSrcMap"> <constant>NO</constant> </setHeader>

           
            <!--  Convert Body to String for Further Processing -->
            <convertBodyTo type="java.lang.String"/>
            <log message="After Conversion to String: ${body}" loggingLevel="INFO"/>

            <!--  Error Handling for Processing -->
            <doTry>
                <bean ref="odeUtils" method="decodeWebString"/>
                <to uri="direct:requestDispatcher"/>
            <doCatch>
                <exception>com.sas.finance.fraud.transaction.field.Field$EncodeException</exception>
                <bean ref="errorHandling" method="errorMessageJson"/>
                <log message="Error in Processing Record ID: ${header.recordId}" loggingLevel="ERROR"/>
                <stop/>
            </doCatch>
            </doTry>
        </route>

        <!--  Route 3: Request Dispatcher -->
        <route id="Dispatcher">
            <from uri="direct:requestDispatcher"/>
            <doTry>
                <bean ref="requestDispatcher" method="process"/>
                <bean id="StoreUnqKeyFor_format" ref="uniqueKeySaver"/>
                <log message="Sending transaction to ODE route: ${body}" loggingLevel="INFO"/>
                <to uri="disruptor:sendTransactionToODE?timeout=5000&amp;waitForTaskToComplete=Always"/>
            </doTry>
        </route>

        <!--  Route 4: Sending Processed Data to External System -->
        <route>
            <from uri="disruptor:sendTransactionToODE?concurrentConsumers=8"/>

            <onCompletion><to uri="seda:collectPerfData"/></onCompletion>

            <bean id="setTransactionId" ref="setTransactionId"/>
            <bean ref="customExchangeTracker" method="startLogging"/>
            <bean id="validation" ref="xtionValidator" method="validate"/>
            
            <log message="Sending to the load balancer: ${body}" loggingLevel="INFO"/>

            <loadBalance id="ODE Load Balancer" inheritErrorHandler="false">
                <custom ref="odeLoadBalancer"/>
                <to id="sfmdemo" uri="netty4:tcp://sfmserver.demo.sas.com:5018?sync=true&amp;encoder=#encoder&amp;decoder=#decoder"/>
            </loadBalance>

            <log message="Received response from load balancer: ${body}" loggingLevel="INFO"/>

            <bean ref="customExchangeTracker" method="endLogging"/>
            <bean ref="txnToJsonString"/>
            
            <log message="Response before parsing and sending response: ${body}" loggingLevel="INFO"/>
            
        </route>

    </camelContext>

</beans>
